

module FinalProject(Clock,Stop,Resetn,SegmentDisplay);

input Clock, Stop, Resetn;
output [0:6]SegmentDisplay;
wire [2:0]Number;
wire output_clk;
wire Score;
assign Score=5;

variableClock var_clk(Clock,Score,Resetn,output_clk);

upcounter_slot Number1(Clock,output_clk,Stop,Resetn,Number);

seg7 Display1(Number[2:0],SegmentDisplay[0:6]);


endmodule


module variableClock(Clock,Score,Resetn,output_clk);

input Clock, Resetn,Score;
output reg output_clk;


reg[31:0]counter;

always@(posedge Clock, negedge Resetn)
	begin
		if(!Resetn)
			begin	
				counter<=0;
				output_clk<=0;
			end
		else
			begin
				if(counter==10000000)
					begin	
						counter<=0;
						output_clk<=~output_clk;
					end
				else
					begin
						counter<=counter+Score;
					end
			end
end
				
				
				
endmodule
				
						


module upcounter_slot(Clock,output_clk,Stop,Resetn,Number);
	
	input Clock,Stop,Resetn,output_clk;
	output reg [31:0]Number;
	reg [1:0] y, Y;
	parameter A=2'b00,B=2'b01;
	
	//Define next state combinational circuit
	
	always@(Stop,y)
	
		case (y)
			A:	if(!Stop) Y=B;
				else	Y=A;
			B:	if(Stop) Y=B;
				else	Y=B;
			
			
			default: Y=2'bxx;	// do not care about other values
				
		endcase
		


		
		always@(negedge Resetn, posedge Clock)
			if (Resetn==0) y<=A;
			else y<=Y;		
	
	
		always @ (posedge output_clk,negedge Resetn)
			
			if(!Resetn)
				Number<=0;
				
			else if(y==B)
				Number<=Number;
				
			else if(Clock)
				Number<=Number+1;	
					
			
				
endmodule


module seg7(signalIn,ledOut);

//creates a 4 value input vector and 7 outputs
	
	input [2:0]signalIn;
	output reg [6:0]ledOut;

	always @(signalIn)
		case(signalIn)
			0:ledOut = 7'b0000001;
			1:ledOut = 7'b1001111;
			2:ledOut = 7'b0010010;
			3:ledOut = 7'b0000110;
			4:ledOut = 7'b1001100;
			5:ledOut = 7'b0100100;
			6:ledOut = 7'b0100000;
			7:ledOut = 7'b0001111;
			
			default:ledOut = 7'bx;
			
		endcase
endmodule





module levelstate(compare_out,x2, x3, x4, score_count);

